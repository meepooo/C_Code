/*数组的存储与初始化

一维数组的存储

数组元素在内存中顺次存放，他们的地址是连续的。
元素间物理地址上的相邻，对应着逻辑次序上的相邻。

例如：

	int a[10];
	
  a   a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]
   
	  数组名字是数组首元素的内存地址。
	  数组名是一个常量，不能被赋值。
	  
一维数组的初始化：
<>列出全部元素的初始值
	例如：static int a[10]={0,1,2,3,4,5,6,7,8,9};
<>可以只给一部分元素指定初值
	例如：static int a[10]={0,1,2,3,4};
<>列出全部数组元素的初值时，可以不指定数组长度
	例如：static int a[]={0,1,2,3,4,5,6,7,8,9}
	
	
二维数组的存储
<>按行存放
例如: float a[3][4];

				a[0]——a00 a01 a02 a03
可以理解为：a 	a[1]——a10 a11 a12 a13
				a[2]——a20 a21 a22 a23
				
其中数组a的存储顺序为：
a00 a01 a02 a03 a10 a11 a12 a13 a20 a21 a22 a23

二维数组的初始化：
<>将所有初值写在一个{}内，按顺序初始化
例如： static int a[3][4]={1,2,3,4,5,6,7,8,9,10,11,12}
<>分行列出二维数组的初值
例如：static int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
<>可以对部分元素初始化
例如：static int a[3][4]={{1},{0,6},{0,0,11}};
<>列出全部初始值时，第一维下标个数可以省略
例如：static int a[][4]={1,2,3,4,5,6,7,8,9,10,11,12}
或：static innt a[][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}}

<>如果不作任何初始化，局部作用域的非静态数组中会存在
垃圾数据，static数组中的数据默认初始化为0
<>如果只对部分元素初始化，剩下的未显示的初始化的元素，
将自动被初始化为零

例:求Fibonacci 数列的前20项，将结果存放数组并显示
*/

#include<iostream>
using namespace std;

int main(){
	int f[20]={1,1};       //初始化第0、1个数
	for (int i=2;i<20;i++) //求第2~19个数
	  f[i]=f[i-2]+f[i-1];
	for (i=0;i<20;i++){    //输出，每行5个数
		if(i%5==0)cout<<endl;
		cout.width(12);	   //设置输出宽度为12
		cout<<f[i];
	}
	
	return 0;
}








